#!/usr/bin/env python3
"""
Ejemplo de uso del Sistema de A/B Testing para Live Agent Morphing
Muestra c√≥mo configurar y usar tests A/B en producci√≥n.
"""

import sys
sys.path.append('/home/hernandezbg/proyectos/behemot_framework_package')

from behemot_framework.morphing.ab_testing import ABTestConfig, PredefinedABTests

def ejemplo_configuracion_ab_test():
    """Ejemplo de c√≥mo configurar un test A/B personalizado"""
    
    print("üî¨ Ejemplo: Configuraci√≥n de Test A/B Personalizado")
    print("=" * 60)
    
    # Ejemplo 1: Test de umbrales de confianza
    confidence_test = ABTestConfig(
        test_id="confidence_optimization_2024",
        name="Optimizaci√≥n de Umbral de Confianza",
        description="Encuentra el umbral √≥ptimo para transformaciones graduales",
        variants=[
            {
                "name": "Conservative",
                "gradual_layer": {"confidence_threshold": 0.8},
                "description": "Umbral alto - solo transformaciones muy seguras"
            },
            {
                "name": "Balanced", 
                "gradual_layer": {"confidence_threshold": 0.6},
                "description": "Umbral medio - balance entre precisi√≥n y cobertura"
            },
            {
                "name": "Aggressive",
                "gradual_layer": {"confidence_threshold": 0.4},
                "description": "Umbral bajo - m√°s transformaciones, posible menor precisi√≥n"
            }
        ],
        metrics=["transformation_success", "user_satisfaction", "precision", "coverage"],
        duration_days=14,
        min_samples=200,
        confidence_level=0.95
    )
    
    print(f"üìã Test ID: {confidence_test.test_id}")
    print(f"üéØ Objetivo: {confidence_test.description}")
    print(f"üìä Variantes: {len(confidence_test.variants)}")
    print(f"‚è±Ô∏è  Duraci√≥n: {confidence_test.duration_days} d√≠as")
    print(f"üìà M√©tricas: {', '.join(confidence_test.metrics)}")
    
    for i, variant in enumerate(confidence_test.variants):
        threshold = variant["gradual_layer"]["confidence_threshold"]
        print(f"   Variante {i+1}: {variant['name']} (umbral: {threshold})")
        print(f"   ‚îî‚îÄ {variant['description']}")
    
    return confidence_test

def ejemplo_test_sensibilidad():
    """Ejemplo de test de sensibilidad del sistema"""
    
    print("\nüî¨ Ejemplo: Test de Sensibilidad del Sistema")
    print("=" * 60)
    
    sensitivity_test = ABTestConfig(
        test_id="sensitivity_optimization_2024",
        name="Optimizaci√≥n de Sensibilidad del Morphing",
        description="Encuentra el nivel de sensibilidad √≥ptimo para diferentes tipos de usuarios",
        variants=[
            {
                "name": "Low_Sensitivity",
                "settings": {"sensitivity": "low"},
                "gradual_layer": {"confidence_threshold": 0.8},
                "advanced": {
                    "instant_layer": {"case_sensitive": False},
                    "gradual_layer": {"analyze_last_messages": 2}
                },
                "target_users": "usuarios_conservadores"
            },
            {
                "name": "Medium_Sensitivity", 
                "settings": {"sensitivity": "medium"},
                "gradual_layer": {"confidence_threshold": 0.6},
                "advanced": {
                    "instant_layer": {"case_sensitive": False},
                    "gradual_layer": {"analyze_last_messages": 3}
                },
                "target_users": "usuarios_generales"
            },
            {
                "name": "High_Sensitivity",
                "settings": {"sensitivity": "high"},
                "gradual_layer": {"confidence_threshold": 0.4},
                "advanced": {
                    "instant_layer": {"case_sensitive": True},
                    "gradual_layer": {"analyze_last_messages": 5}
                },
                "target_users": "usuarios_power"
            }
        ],
        metrics=["transformation_frequency", "accuracy", "user_experience", "conversation_flow"],
        duration_days=21,
        min_samples=300
    )
    
    print(f"üìã Test ID: {sensitivity_test.test_id}")
    print(f"üéØ Objetivo: {sensitivity_test.description}")
    print(f"üë• Segmentaci√≥n: Por tipo de usuario")
    
    for variant in sensitivity_test.variants:
        sens = variant["settings"]["sensitivity"]
        threshold = variant["gradual_layer"]["confidence_threshold"]
        target = variant["target_users"]
        print(f"   ‚Ä¢ {variant['name']}: sensibilidad {sens}, umbral {threshold}")
        print(f"     ‚îî‚îÄ Target: {target}")
    
    return sensitivity_test

def ejemplo_configuracion_yaml():
    """Ejemplo de c√≥mo configurar A/B testing en YAML"""
    
    print("\nüìÑ Ejemplo: Configuraci√≥n YAML con A/B Testing")
    print("=" * 60)
    
    yaml_example = """
# config/mi_asistente.yaml
MODEL_PROVIDER: "openai"
MODEL_NAME: "gpt-4o-mini"

PROMPT_SISTEMA: |
  Eres un asistente inteligente con capacidades de transformaci√≥n.

# MORPHING con A/B Testing
MORPHING:
  enabled: true
  default_morph: "general"
  
  # A/B Testing Configuration
  ab_testing:
    enabled: true
    active_tests:
      - "confidence_optimization_2024"
      - "sensitivity_optimization_2024"
    
    # Tests autom√°ticos
    auto_tests:
      confidence_threshold:
        enabled: true
        variants: [0.4, 0.6, 0.8]
        duration_days: 14
        min_samples: 200
        
      sensitivity:
        enabled: true
        variants: ["low", "medium", "high"] 
        duration_days: 21
        min_samples: 300
  
  morphs:
    general:
      personality: "Asistente general amigable"
      
    sales:
      personality: "Asesor de ventas entusiasta"
      instant_triggers: ["comprar", "precio"]
      gradual_triggers:
        keywords: ["producto", "oferta"]
        min_score: 2
      
    support:
      personality: "T√©cnico paciente y met√≥dico"
      instant_triggers: ["no funciona", "error"]
      gradual_triggers:
        keywords: ["problema", "lento"]
        min_score: 1
"""
    
    print(yaml_example)

def ejemplo_flujo_produccion():
    """Ejemplo del flujo completo en producci√≥n"""
    
    print("\nüöÄ Ejemplo: Flujo en Producci√≥n")
    print("=" * 60)
    
    flujo = """
1. üìã CONFIGURACI√ìN INICIAL
   ‚îå‚îÄ Crear test A/B con PredefinedABTests.confidence_threshold_test()
   ‚îú‚îÄ Configurar duraci√≥n y m√©tricas objetivo
   ‚îî‚îÄ Activar test en producci√≥n

2. üë• ASIGNACI√ìN DE USUARIOS
   ‚îå‚îÄ Usuario A ‚Üí Variante 1 (umbral 0.4)
   ‚îú‚îÄ Usuario B ‚Üí Variante 2 (umbral 0.6)  
   ‚îî‚îÄ Usuario C ‚Üí Variante 3 (umbral 0.8)

3. üìä RECOLECCI√ìN DE DATOS
   ‚îå‚îÄ Cada interacci√≥n registra:
   ‚îÇ  ‚îú‚îÄ √âxito/fallo de la transformaci√≥n
   ‚îÇ  ‚îú‚îÄ Nivel de confianza
   ‚îÇ  ‚îú‚îÄ Tiempo de transformaci√≥n
   ‚îÇ  ‚îî‚îÄ M√©tricas personalizadas
   ‚îî‚îÄ Almacenamiento autom√°tico en Redis

4. üìà AN√ÅLISIS AUTOM√ÅTICO
   ‚îå‚îÄ An√°lisis estad√≠stico en tiempo real
   ‚îú‚îÄ Identificaci√≥n de variante ganadora
   ‚îú‚îÄ C√°lculo de significancia estad√≠stica
   ‚îî‚îÄ Recomendaciones autom√°ticas

5. üèÜ OPTIMIZACI√ìN
   ‚îå‚îÄ Aplicar configuraci√≥n ganadora
   ‚îú‚îÄ Gradual rollout de la configuraci√≥n √≥ptima
   ‚îî‚îÄ Nuevo test A/B para siguiente optimizaci√≥n

6. üîÑ MEJORA CONTINUA
   ‚îî‚îÄ Ciclo autom√°tico de optimizaci√≥n
      ‚îú‚îÄ Test semanal/mensual autom√°tico
      ‚îú‚îÄ M√©tricas de negocio integradas
      ‚îî‚îÄ Aprendizaje continuo del sistema
"""
    
    print(flujo)

def ejemplo_metricas_negocio():
    """Ejemplo de m√©tricas de negocio relevantes"""
    
    print("\nüìä Ejemplo: M√©tricas de Negocio")
    print("=" * 60)
    
    metricas = {
        "Precisi√≥n del Morphing": {
            "descripci√≥n": "% de transformaciones correctas",
            "objetivo": "> 90%",
            "impacto": "Experiencia de usuario"
        },
        "Tiempo de Respuesta": {
            "descripci√≥n": "Latencia promedio de transformaci√≥n",
            "objetivo": "< 200ms",
            "impacto": "Performance percibida"
        },
        "Satisfacci√≥n del Usuario": {
            "descripci√≥n": "Rating impl√≠cito de satisfacci√≥n",
            "objetivo": "> 4.5/5.0",
            "impacto": "Retenci√≥n de usuarios"
        },
        "Cobertura de Transformaciones": {
            "descripci√≥n": "% de mensajes que activan morphing",
            "objetivo": "30-50%",
            "impacto": "Utilidad del sistema"
        },
        "Reducci√≥n de Escalaciones": {
            "descripci√≥n": "% menos derivaciones a humanos",
            "objetivo": "> 25%",
            "impacto": "Costo operativo"
        },
        "Tiempo de Resoluci√≥n": {
            "descripci√≥n": "Promedio de mensajes para resolver",
            "objetivo": "< 3 mensajes",
            "impacto": "Eficiencia conversacional"
        }
    }
    
    for metrica, info in metricas.items():
        print(f"üìä {metrica}")
        print(f"   ‚îî‚îÄ {info['descripci√≥n']}")
        print(f"   ‚îî‚îÄ Objetivo: {info['objetivo']}")
        print(f"   ‚îî‚îÄ Impacto: {info['impacto']}")
        print()

def main():
    """Ejecuta todos los ejemplos"""
    print("üß™ Live Agent Morphing - Ejemplos de A/B Testing")
    print("=" * 70)
    
    # Ejemplos de configuraci√≥n
    confidence_test = ejemplo_configuracion_ab_test()
    sensitivity_test = ejemplo_test_sensibilidad()
    
    # Configuraci√≥n YAML
    ejemplo_configuracion_yaml()
    
    # Flujo de producci√≥n
    ejemplo_flujo_produccion()
    
    # M√©tricas de negocio
    ejemplo_metricas_negocio()
    
    print("\nüéØ Tests Predefinidos Disponibles:")
    print("=" * 60)
    
    predefined = [
        ("Umbral de Confianza", PredefinedABTests.confidence_threshold_test()),
        ("Sensibilidad", PredefinedABTests.sensitivity_test()),
        ("Anti-Loop Protection", PredefinedABTests.anti_loop_test())
    ]
    
    for name, test in predefined:
        print(f"üî¨ {name}")
        print(f"   ‚îî‚îÄ ID: {test.test_id}")
        print(f"   ‚îî‚îÄ Variantes: {len(test.variants)}")
        print(f"   ‚îî‚îÄ Duraci√≥n: {test.duration_days} d√≠as")
        print(f"   ‚îî‚îÄ M√©tricas: {', '.join(test.metrics)}")
        print()
    
    print("‚ú® ¬°A/B Testing listo para optimizar tu morphing autom√°ticamente!")

if __name__ == "__main__":
    main()